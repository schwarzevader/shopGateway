#spring:
#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: http://localhost:8080/realms/spring-microservices-realm
#          jwk-set-uri: http://localhost:8080/realms/spring-microservices-realm/protocol/openid-connect/certs
#
#        client:
#          registration:
#            keycloak:
#              client-id: shopGateway
#              client-secret: NAptgnXlZSbs0wSXXvZDddcoX5ed96dY
#              authorization-grant-type: authorization_code
#              redirect-uri: http://localhost:8073/*


#spring:
#  security:
#    oauth2:
#      client:
#        provider:
#          keycloak:
#            token-uri: http://localhost:8080/auth/realms/master/protocol/openid-connect/token
#            authorization-uri: http://localhost:8080/auth/realms/spring-microservice
#
#            user-name-attribute: preferred_username
#        registration:
#          keycloak-with-test-scope:
#            provider: keycloak
#            client-id: shopGateway
#            client-secret: jaMD1Pv7DFI4RGbGY0BUHjOxGG9PXYRp
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
#          keycloak-without-test-scope:
#            provider: keycloak
#            client-id: spring-without-test-scope
#            client-secret: f6fc369d-49ce-4132-8282-5b5d413eba23
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"

#security:
#  oauth2:
#    client:
#      registration:
#        gateway:
#          provider: uaa
#          client-id: gateway
#          client-secret: secret
#          authorization-grant-type: authorization_code
#          redirect-uri-template: "*"
#          scope: openid,profile,email,resource.read
#      provider:
#        uaa:
#          authorization-uri: http://localhost:8090/uaa/oauth/authorize
#          token-uri: http://uaa:8090/uaa/oauth/token
#          user-info-uri: http://uaa:8090/uaa/userinfo
#          user-name-attribute: sub
#          jwk-set-uri: http://uaa:8090/uaa/token_keys


spring:
  security:
    oauth2:
      resourceserver:
        provider:
          keycloak:
              jwt:
               jwk-set-uri: http://localhost:8080/auth/realms/spring-microservice
               issuer-uri: http://localhost:8080/realms/spring-microservice
        client:
          registration:
            keycloak:
              client-id: shop-gateway
              client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
             # authorization-grant-type: authorization_code

              #http://localhost:8080/realms/spring-microservice/protocol/openid-connect/token

#spring:
#  security:
#    oauth2:
#      client:
#        provider:
#          keycloak:
#            #authorization-uri: http://localhost:9999/auth/realms/upe/protocol/openid-connect/auth
#            issuer-uri: http://localhost:9999/auth/realms/upe
#            token-uri: http://localhost:9999/auth/realms/upe/protocol/openid-connect/token
#        registration:
#          keycloak:
#            provider: keycloak
#            client-id: upe-gateway-service
#            client-secret: 7c1e4c2f-d128-4f92-a0cd-b52f46220d4e
#            authorization-grant-type: client_credentials

#spring:
#  application:
#    name: shop-gateway
#  cloud:
#    config:
#      uri: http://localhost:8888
#  main:
#    web-application-type: reactive


#server:
#  port: 8073
#
#eureka:
#  instance:
#    preferIpAddress: true
#  client:
#    registerWithEureka: true
#    fetchRegistry: true
#    serviceUrl:
#      defaultZone: http://localhost:8070/eureka
#
#
#spring:
#  security:
#    oauth2:
#      resource server:
#        jwt:
#          jwk-set-uri: http://localhost:8080/auth/realms/spring-microservice
#        client:
#          registration:
#            keycloak:
#              client-id: shopGateway
#              client-secret: jaMD1Pv7DFI4RGbGY0BUHjOxGG9PXYRp
#              authorization-grant-type: authorization_code
#  zipkin:
#    baseUrl: http://zipkin:9411
#  sleuth:
#    sampler:
#      percentage: 1
#  cloud:
#    loadbalancer.ribbon.enabled: false

server:
  port: 8073

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka


#spring:
#  security:
#    oauth2:
#      resource-server:
#        jwt:
#          jwk-set-uri: http://localhost:8080/realms/spring-microservice/protocol/openid-connect/certs
#          issuer-uri: http://localhost:8080/realms/spring-microservice
#          client-id: shopGateway
#          client-secret: MRvszEcOJdm5GLqspj4DqcEkNwxVh6ND
#          authorization-grant-type: authorization_code
#  zipkin:
#    baseUrl: http://zipkin:9411
#  sleuth:
#    sampler:
#      percentage: 1
#  cloud:
#    loadbalancer.ribbon.enabled: false


    security:
      oauth2:
        client:
          provider:
            keycloak:
              issuer-uri: http://localhost:8080/realms/spring-microservice
              jwk-set-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
          registration:
              client:
              provider: keycloak
              client-id: shop-gateway
              client-secret: FQFchTCC9OgSx2kYzUBOINdqaZXHevHf
              authorization-grant-type: authorization_code
              scope:
                - email
                - profile
                - roles

      zipkin:
        baseUrl: http://zipkin:9411
      sleuth:
        sampler:
          percentage: 1
      cloud:
        loadbalancer.ribbon.enabled: false

#    client:
#      registration:
#        keycloak:
#          # realm: spring-microservice
#          client-id: shop-gateway
#          client-secret: a563e5iUsHp6B712uIgvq3IHZcaIYo2D
#          #authorization-grant-type: authorization_code

server:
  port: 8073

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka

spring:
  security:
    oauth2:
      client:
        provider:
          my-keycloak-provider:
            issuer-uri: http://localhost:8080/realms/spring-microservice
        registration:
          keycloak-spring-gateway-client:
            provider: my-keycloak-provider
            client-id: shop-gateway
            client-secret: fQnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
            authorization-grant-type: authorization_code
            redirect-uri: 'http://localhost:8073/*'

      security:
        oauth2:
          client:
            provider:
              keycloak:
                issuer-uri: http://localhost:8080/realms/spring-microservice
                jwk-set-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
            registration:
              client:
                provider: keycloak
                client-id: shop-gateway
                client-secret: FQFchTCC9OgSx2kYzUBOINdqaZXHevHf
                authorization-grant-type: authorization_code
                scope:
                  - email
                  - profile
                  - roles


    spring:
      security:
        oauth2:
          resourceserver:
            opaquetoken:
              introspection-uri: http://localhost:8083/realms/spring-microservices/protocol/openid-connect/token/introspect
              client-id: shop-gateway
              client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB


    security:
      oauth2:
        client:
          provider:
            keycloak:
              issuer-uri: http://localhost:8080/realms/spring-microservice
              jwk-set-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
              introspection-uri: http://localhost:8083/realms/spring-microservices/protocol/openid-connect/token/introspect
              token-uri: http://localhost:8080/realms/spring-microservice/protocol/openid-connect/token

          registration:
            client:
              provider: keycloak
              client-id: shop-gateway
              client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
              authorization-grant-type: authorization_code
#              scope:
#                - email
#                - profile
#                - roles

      zipkin:
        baseUrl: http://zipkin:9411
      sleuth:
        sampler:
          percentage: 1
      cloud:
        loadbalancer.ribbon.enabled: false


          jwk-set-uri: http://localhost:8080/auth/realms/spring-microservice
          authorization-uri: http://localhost:8080/auth/realms/spring-microservice/protocol/openid-connect/auth
          token-uri: http://localhost:8080/auth/realms/spring-microservice/protocol/openid-connect/token
        client:
          registration:
            keycloak:
              scope: openid
              client-id: shop-gateway
              client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
              authorization-grant-type: authorization_code
              #redirect-uri: "http://localhost:8080/login/oauth2/code/keycloak"

spring:
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: shop-gateway
            client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
            #clientName: Keycloak
            authorization-grant-type: authorization_code
            redirectUri: 'http://localhost:8073/*'
            scope:
              - openid
              - profile
              - email
        provider:
          keycloak:
            authorization-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/auth
            user-info-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
            issuer-uri: http://localhost:8080/realms/spring-microservice
            jwk-set-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
            token-uri: http://localhost:8080/realms/spring-microservice/protocol/openid-connect/token


spring:
  cloud:
    gateway:
      default-filters:
        - TokenRelay
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: shop-gateway
            client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
            clientName: shop-gateway
            authorization-grant-type: authorization_code
            #redirectUri: 'http://localhost:8073/login/oauth2/code/shop-gateway' {baseUrl}/login/oauth2/code/keycloak
            redirectUri: '*'
            scope:
              - openid
              - profile
              - email
        provider:
          keycloak:
            authorization-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/auth
            user-info-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
            issuer-uri: http://localhost:8080/realms/spring-microservice
            jwk-set-uri: http://localhost:8080/realms/spring-microservices/protocol/openid-connect/certs
            token-uri: http://localhost:8080/realms/spring-microservice/protocol/openid-connect/token




spring:
  security:
    oauth2:
      client:
        provider:
          my-keycloak-provider:
            issuer-uri: ttp://localhost:8080/realms/spring-microservice
        registration:
          keycloak-spring-gateway-client:
            provider: my-keycloak-provider
            client-id: hop-gateway
            client-secret: QnxC5oWMzzfzxH9v9zSKIGCmeWvbX9pB
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/login/oauth2/code/keycloak'